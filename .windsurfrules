# ESP32 Marauder

## Project Context
WiFi/Bluetooth offensive and defensive testing suite for ESP32-S3
- Portable wireless security testing and analysis tool
- WiFi network scanning, deauth attacks, and evil twin capabilities
- Wardriving with GPS logging and packet capture
- SD card storage for captured data and logs
- TFT Display and 5-way switch user interface

## Code Style and Structure
- Write concise, technical C++ code with accurate examples
- Use functional and declarative programming patterns; prefer composition
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isMounted, hasError)
- Implement RAII for resource management
- Keep functions small and focused (<50 lines)


## Searching
- Use PowerShell for searching instead of `grep_search`.
- Example to find "my_function" in all .cpp and .h files: `Get-ChildItem -Path . -Recurse -Include *.cpp,*.h | Select-String -Pattern "my_function"`

## File System Best Practices
- Always check SD card mount status before file operations
- Implement proper file handle management (open/close pairs)
- Use consistent file naming: `[type]_[timestamp].[ext]`
- Handle file system errors gracefully with retry logic
- Close files immediately after use

## Error Handling
- Check all file operation return values
- Provide meaningful error messages with context
- Implement proper cleanup in error conditions
- Use error codes for expected failures
- Log all critical errors with timestamps

## Debugging
- Add debug logs for file operations
- Include file paths in error messages
- Log memory usage in critical sections
- Use compile-time debug levels
- Add debug commands for system status

## Naming Conventions
- Directories: `lowercase_with_underscores`
- Functions/Vars: `camelCase`
- Classes/Structs: `PascalCase`
- Constants: `UPPER_CASE`
- Globals: `g_` prefix
- Boolean: `isX`/`hasX` prefix

## Memory Management
- Prefer stack allocation
- Use smart pointers for dynamic allocation
- Check malloc/calloc return values
- Implement proper cleanup in destructors
- Monitor heap fragmentation

## Performance
- Minimize file operations
- Use buffered I/O
- Batch small writes
- Avoid dynamic allocation in loops
- Use const references for large objects

## Hardware
- Document all pin assignments
- Implement proper power management
- Handle SD card hot-swapping
- Monitor power consumption
- Implement watchdog timer

## Testing
- Test with different SD cards
- Verify error recovery
- Test low-memory conditions
- Validate file system operations
- Test power loss scenarios


## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements

## Development Workflow
- Use proper version control
- Implement proper code review process
- Follow semantic versioning for releases
- Maintain changelog